// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DemoTable.proto

package com.elex.hoe.table;

public final class DemoTableOuterClass {
  private DemoTableOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ItemConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.elex.hoe.table.ItemConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *道具id
     * </pre>
     *
     * <code>int32 Id = 1;</code>
     */
    int getId();

    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>string Name = 2;</code>
     */
    java.lang.String getName();
    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>string Name = 2;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     *稀有度-背景底色
     * </pre>
     *
     * <code>int32 Rare = 3;</code>
     */
    int getRare();

    /**
     * <pre>
     *对应的钻石价值
     * </pre>
     *
     * <code>int32 ItemValue = 4;</code>
     */
    int getItemValue();

    /**
     * <pre>
     *道具Icon位置
     * </pre>
     *
     * <code>string ItemIconPos = 5;</code>
     */
    java.lang.String getItemIconPos();
    /**
     * <pre>
     *道具Icon位置
     * </pre>
     *
     * <code>string ItemIconPos = 5;</code>
     */
    com.google.protobuf.ByteString
        getItemIconPosBytes();

    /**
     * <pre>
     *道具掉落位置
     * </pre>
     *
     * <code>string ItemDropPos = 6;</code>
     */
    java.lang.String getItemDropPos();
    /**
     * <pre>
     *道具掉落位置
     * </pre>
     *
     * <code>string ItemDropPos = 6;</code>
     */
    com.google.protobuf.ByteString
        getItemDropPosBytes();

    /**
     * <pre>
     *任务ID（；间隔）
     * </pre>
     *
     * <code>repeated int32 TaskID = 7;</code>
     */
    java.util.List<java.lang.Integer> getTaskIDList();
    /**
     * <pre>
     *任务ID（；间隔）
     * </pre>
     *
     * <code>repeated int32 TaskID = 7;</code>
     */
    int getTaskIDCount();
    /**
     * <pre>
     *任务ID（；间隔）
     * </pre>
     *
     * <code>repeated int32 TaskID = 7;</code>
     */
    int getTaskID(int index);

    /**
     * <pre>
     *合成条件
     * </pre>
     *
     * <code>map&lt;int32, string&gt; Compose = 8;</code>
     */
    int getComposeCount();
    /**
     * <pre>
     *合成条件
     * </pre>
     *
     * <code>map&lt;int32, string&gt; Compose = 8;</code>
     */
    boolean containsCompose(
        int key);
    /**
     * Use {@link #getComposeMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.String>
    getCompose();
    /**
     * <pre>
     *合成条件
     * </pre>
     *
     * <code>map&lt;int32, string&gt; Compose = 8;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.String>
    getComposeMap();
    /**
     * <pre>
     *合成条件
     * </pre>
     *
     * <code>map&lt;int32, string&gt; Compose = 8;</code>
     */

    java.lang.String getComposeOrDefault(
        int key,
        java.lang.String defaultValue);
    /**
     * <pre>
     *合成条件
     * </pre>
     *
     * <code>map&lt;int32, string&gt; Compose = 8;</code>
     */

    java.lang.String getComposeOrThrow(
        int key);
  }
  /**
   * Protobuf type {@code com.elex.hoe.table.ItemConfig}
   */
  public  static final class ItemConfig extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.elex.hoe.table.ItemConfig)
      ItemConfigOrBuilder {
    // Use ItemConfig.newBuilder() to construct.
    private ItemConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ItemConfig() {
      id_ = 0;
      name_ = "";
      rare_ = 0;
      itemValue_ = 0;
      itemIconPos_ = "";
      itemDropPos_ = "";
      taskID_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private ItemConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              id_ = input.readInt32();
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 24: {

              rare_ = input.readInt32();
              break;
            }
            case 32: {

              itemValue_ = input.readInt32();
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();

              itemIconPos_ = s;
              break;
            }
            case 50: {
              java.lang.String s = input.readStringRequireUtf8();

              itemDropPos_ = s;
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                taskID_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              taskID_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                taskID_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                taskID_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                compose_ = com.google.protobuf.MapField.newMapField(
                    ComposeDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000080;
              }
              com.google.protobuf.MapEntry<java.lang.Integer, java.lang.String>
              compose__ = input.readMessage(
                  ComposeDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              compose_.getMutableMap().put(
                  compose__.getKey(), compose__.getValue());
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          taskID_ = java.util.Collections.unmodifiableList(taskID_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.elex.hoe.table.DemoTableOuterClass.internal_static_com_elex_hoe_table_ItemConfig_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 8:
          return internalGetCompose();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.elex.hoe.table.DemoTableOuterClass.internal_static_com_elex_hoe_table_ItemConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.elex.hoe.table.DemoTableOuterClass.ItemConfig.class, com.elex.hoe.table.DemoTableOuterClass.ItemConfig.Builder.class);
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <pre>
     *道具id
     * </pre>
     *
     * <code>int32 Id = 1;</code>
     */
    public int getId() {
      return id_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>string Name = 2;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>string Name = 2;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int RARE_FIELD_NUMBER = 3;
    private int rare_;
    /**
     * <pre>
     *稀有度-背景底色
     * </pre>
     *
     * <code>int32 Rare = 3;</code>
     */
    public int getRare() {
      return rare_;
    }

    public static final int ITEMVALUE_FIELD_NUMBER = 4;
    private int itemValue_;
    /**
     * <pre>
     *对应的钻石价值
     * </pre>
     *
     * <code>int32 ItemValue = 4;</code>
     */
    public int getItemValue() {
      return itemValue_;
    }

    public static final int ITEMICONPOS_FIELD_NUMBER = 5;
    private volatile java.lang.Object itemIconPos_;
    /**
     * <pre>
     *道具Icon位置
     * </pre>
     *
     * <code>string ItemIconPos = 5;</code>
     */
    public java.lang.String getItemIconPos() {
      java.lang.Object ref = itemIconPos_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        itemIconPos_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *道具Icon位置
     * </pre>
     *
     * <code>string ItemIconPos = 5;</code>
     */
    public com.google.protobuf.ByteString
        getItemIconPosBytes() {
      java.lang.Object ref = itemIconPos_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        itemIconPos_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ITEMDROPPOS_FIELD_NUMBER = 6;
    private volatile java.lang.Object itemDropPos_;
    /**
     * <pre>
     *道具掉落位置
     * </pre>
     *
     * <code>string ItemDropPos = 6;</code>
     */
    public java.lang.String getItemDropPos() {
      java.lang.Object ref = itemDropPos_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        itemDropPos_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *道具掉落位置
     * </pre>
     *
     * <code>string ItemDropPos = 6;</code>
     */
    public com.google.protobuf.ByteString
        getItemDropPosBytes() {
      java.lang.Object ref = itemDropPos_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        itemDropPos_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TASKID_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> taskID_;
    /**
     * <pre>
     *任务ID（；间隔）
     * </pre>
     *
     * <code>repeated int32 TaskID = 7;</code>
     */
    public java.util.List<java.lang.Integer>
        getTaskIDList() {
      return taskID_;
    }
    /**
     * <pre>
     *任务ID（；间隔）
     * </pre>
     *
     * <code>repeated int32 TaskID = 7;</code>
     */
    public int getTaskIDCount() {
      return taskID_.size();
    }
    /**
     * <pre>
     *任务ID（；间隔）
     * </pre>
     *
     * <code>repeated int32 TaskID = 7;</code>
     */
    public int getTaskID(int index) {
      return taskID_.get(index);
    }
    private int taskIDMemoizedSerializedSize = -1;

    public static final int COMPOSE_FIELD_NUMBER = 8;
    private static final class ComposeDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.Integer, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.Integer, java.lang.String>newDefaultInstance(
                  com.elex.hoe.table.DemoTableOuterClass.internal_static_com_elex_hoe_table_ItemConfig_ComposeEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.Integer, java.lang.String> compose_;
    private com.google.protobuf.MapField<java.lang.Integer, java.lang.String>
    internalGetCompose() {
      if (compose_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            ComposeDefaultEntryHolder.defaultEntry);
      }
      return compose_;
    }

    public int getComposeCount() {
      return internalGetCompose().getMap().size();
    }
    /**
     * <pre>
     *合成条件
     * </pre>
     *
     * <code>map&lt;int32, string&gt; Compose = 8;</code>
     */

    public boolean containsCompose(
        int key) {
      
      return internalGetCompose().getMap().containsKey(key);
    }
    /**
     * Use {@link #getComposeMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.String> getCompose() {
      return getComposeMap();
    }
    /**
     * <pre>
     *合成条件
     * </pre>
     *
     * <code>map&lt;int32, string&gt; Compose = 8;</code>
     */

    public java.util.Map<java.lang.Integer, java.lang.String> getComposeMap() {
      return internalGetCompose().getMap();
    }
    /**
     * <pre>
     *合成条件
     * </pre>
     *
     * <code>map&lt;int32, string&gt; Compose = 8;</code>
     */

    public java.lang.String getComposeOrDefault(
        int key,
        java.lang.String defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.String> map =
          internalGetCompose().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     *合成条件
     * </pre>
     *
     * <code>map&lt;int32, string&gt; Compose = 8;</code>
     */

    public java.lang.String getComposeOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.String> map =
          internalGetCompose().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (id_ != 0) {
        output.writeInt32(1, id_);
      }
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, name_);
      }
      if (rare_ != 0) {
        output.writeInt32(3, rare_);
      }
      if (itemValue_ != 0) {
        output.writeInt32(4, itemValue_);
      }
      if (!getItemIconPosBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, itemIconPos_);
      }
      if (!getItemDropPosBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, itemDropPos_);
      }
      if (getTaskIDList().size() > 0) {
        output.writeUInt32NoTag(58);
        output.writeUInt32NoTag(taskIDMemoizedSerializedSize);
      }
      for (int i = 0; i < taskID_.size(); i++) {
        output.writeInt32NoTag(taskID_.get(i));
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeIntegerMapTo(
          output,
          internalGetCompose(),
          ComposeDefaultEntryHolder.defaultEntry,
          8);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (id_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, id_);
      }
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, name_);
      }
      if (rare_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, rare_);
      }
      if (itemValue_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, itemValue_);
      }
      if (!getItemIconPosBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, itemIconPos_);
      }
      if (!getItemDropPosBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, itemDropPos_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < taskID_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(taskID_.get(i));
        }
        size += dataSize;
        if (!getTaskIDList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        taskIDMemoizedSerializedSize = dataSize;
      }
      for (java.util.Map.Entry<java.lang.Integer, java.lang.String> entry
           : internalGetCompose().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.Integer, java.lang.String>
        compose__ = ComposeDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(8, compose__);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.elex.hoe.table.DemoTableOuterClass.ItemConfig)) {
        return super.equals(obj);
      }
      com.elex.hoe.table.DemoTableOuterClass.ItemConfig other = (com.elex.hoe.table.DemoTableOuterClass.ItemConfig) obj;

      boolean result = true;
      result = result && (getId()
          == other.getId());
      result = result && getName()
          .equals(other.getName());
      result = result && (getRare()
          == other.getRare());
      result = result && (getItemValue()
          == other.getItemValue());
      result = result && getItemIconPos()
          .equals(other.getItemIconPos());
      result = result && getItemDropPos()
          .equals(other.getItemDropPos());
      result = result && getTaskIDList()
          .equals(other.getTaskIDList());
      result = result && internalGetCompose().equals(
          other.internalGetCompose());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + RARE_FIELD_NUMBER;
      hash = (53 * hash) + getRare();
      hash = (37 * hash) + ITEMVALUE_FIELD_NUMBER;
      hash = (53 * hash) + getItemValue();
      hash = (37 * hash) + ITEMICONPOS_FIELD_NUMBER;
      hash = (53 * hash) + getItemIconPos().hashCode();
      hash = (37 * hash) + ITEMDROPPOS_FIELD_NUMBER;
      hash = (53 * hash) + getItemDropPos().hashCode();
      if (getTaskIDCount() > 0) {
        hash = (37 * hash) + TASKID_FIELD_NUMBER;
        hash = (53 * hash) + getTaskIDList().hashCode();
      }
      if (!internalGetCompose().getMap().isEmpty()) {
        hash = (37 * hash) + COMPOSE_FIELD_NUMBER;
        hash = (53 * hash) + internalGetCompose().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.elex.hoe.table.DemoTableOuterClass.ItemConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elex.hoe.table.DemoTableOuterClass.ItemConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elex.hoe.table.DemoTableOuterClass.ItemConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elex.hoe.table.DemoTableOuterClass.ItemConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elex.hoe.table.DemoTableOuterClass.ItemConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.elex.hoe.table.DemoTableOuterClass.ItemConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.elex.hoe.table.DemoTableOuterClass.ItemConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.elex.hoe.table.DemoTableOuterClass.ItemConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.elex.hoe.table.DemoTableOuterClass.ItemConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.elex.hoe.table.DemoTableOuterClass.ItemConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.elex.hoe.table.DemoTableOuterClass.ItemConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.elex.hoe.table.ItemConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.elex.hoe.table.ItemConfig)
        com.elex.hoe.table.DemoTableOuterClass.ItemConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.elex.hoe.table.DemoTableOuterClass.internal_static_com_elex_hoe_table_ItemConfig_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 8:
            return internalGetCompose();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 8:
            return internalGetMutableCompose();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.elex.hoe.table.DemoTableOuterClass.internal_static_com_elex_hoe_table_ItemConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.elex.hoe.table.DemoTableOuterClass.ItemConfig.class, com.elex.hoe.table.DemoTableOuterClass.ItemConfig.Builder.class);
      }

      // Construct using com.elex.hoe.table.DemoTableOuterClass.ItemConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        id_ = 0;

        name_ = "";

        rare_ = 0;

        itemValue_ = 0;

        itemIconPos_ = "";

        itemDropPos_ = "";

        taskID_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        internalGetMutableCompose().clear();
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.elex.hoe.table.DemoTableOuterClass.internal_static_com_elex_hoe_table_ItemConfig_descriptor;
      }

      public com.elex.hoe.table.DemoTableOuterClass.ItemConfig getDefaultInstanceForType() {
        return com.elex.hoe.table.DemoTableOuterClass.ItemConfig.getDefaultInstance();
      }

      public com.elex.hoe.table.DemoTableOuterClass.ItemConfig build() {
        com.elex.hoe.table.DemoTableOuterClass.ItemConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.elex.hoe.table.DemoTableOuterClass.ItemConfig buildPartial() {
        com.elex.hoe.table.DemoTableOuterClass.ItemConfig result = new com.elex.hoe.table.DemoTableOuterClass.ItemConfig(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.id_ = id_;
        result.name_ = name_;
        result.rare_ = rare_;
        result.itemValue_ = itemValue_;
        result.itemIconPos_ = itemIconPos_;
        result.itemDropPos_ = itemDropPos_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          taskID_ = java.util.Collections.unmodifiableList(taskID_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.taskID_ = taskID_;
        result.compose_ = internalGetCompose();
        result.compose_.makeImmutable();
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.elex.hoe.table.DemoTableOuterClass.ItemConfig) {
          return mergeFrom((com.elex.hoe.table.DemoTableOuterClass.ItemConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.elex.hoe.table.DemoTableOuterClass.ItemConfig other) {
        if (other == com.elex.hoe.table.DemoTableOuterClass.ItemConfig.getDefaultInstance()) return this;
        if (other.getId() != 0) {
          setId(other.getId());
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (other.getRare() != 0) {
          setRare(other.getRare());
        }
        if (other.getItemValue() != 0) {
          setItemValue(other.getItemValue());
        }
        if (!other.getItemIconPos().isEmpty()) {
          itemIconPos_ = other.itemIconPos_;
          onChanged();
        }
        if (!other.getItemDropPos().isEmpty()) {
          itemDropPos_ = other.itemDropPos_;
          onChanged();
        }
        if (!other.taskID_.isEmpty()) {
          if (taskID_.isEmpty()) {
            taskID_ = other.taskID_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureTaskIDIsMutable();
            taskID_.addAll(other.taskID_);
          }
          onChanged();
        }
        internalGetMutableCompose().mergeFrom(
            other.internalGetCompose());
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.elex.hoe.table.DemoTableOuterClass.ItemConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.elex.hoe.table.DemoTableOuterClass.ItemConfig) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int id_ ;
      /**
       * <pre>
       *道具id
       * </pre>
       *
       * <code>int32 Id = 1;</code>
       */
      public int getId() {
        return id_;
      }
      /**
       * <pre>
       *道具id
       * </pre>
       *
       * <code>int32 Id = 1;</code>
       */
      public Builder setId(int value) {
        
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *道具id
       * </pre>
       *
       * <code>int32 Id = 1;</code>
       */
      public Builder clearId() {
        
        id_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>string Name = 2;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>string Name = 2;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>string Name = 2;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>string Name = 2;</code>
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>string Name = 2;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private int rare_ ;
      /**
       * <pre>
       *稀有度-背景底色
       * </pre>
       *
       * <code>int32 Rare = 3;</code>
       */
      public int getRare() {
        return rare_;
      }
      /**
       * <pre>
       *稀有度-背景底色
       * </pre>
       *
       * <code>int32 Rare = 3;</code>
       */
      public Builder setRare(int value) {
        
        rare_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *稀有度-背景底色
       * </pre>
       *
       * <code>int32 Rare = 3;</code>
       */
      public Builder clearRare() {
        
        rare_ = 0;
        onChanged();
        return this;
      }

      private int itemValue_ ;
      /**
       * <pre>
       *对应的钻石价值
       * </pre>
       *
       * <code>int32 ItemValue = 4;</code>
       */
      public int getItemValue() {
        return itemValue_;
      }
      /**
       * <pre>
       *对应的钻石价值
       * </pre>
       *
       * <code>int32 ItemValue = 4;</code>
       */
      public Builder setItemValue(int value) {
        
        itemValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *对应的钻石价值
       * </pre>
       *
       * <code>int32 ItemValue = 4;</code>
       */
      public Builder clearItemValue() {
        
        itemValue_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object itemIconPos_ = "";
      /**
       * <pre>
       *道具Icon位置
       * </pre>
       *
       * <code>string ItemIconPos = 5;</code>
       */
      public java.lang.String getItemIconPos() {
        java.lang.Object ref = itemIconPos_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          itemIconPos_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *道具Icon位置
       * </pre>
       *
       * <code>string ItemIconPos = 5;</code>
       */
      public com.google.protobuf.ByteString
          getItemIconPosBytes() {
        java.lang.Object ref = itemIconPos_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          itemIconPos_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *道具Icon位置
       * </pre>
       *
       * <code>string ItemIconPos = 5;</code>
       */
      public Builder setItemIconPos(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        itemIconPos_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *道具Icon位置
       * </pre>
       *
       * <code>string ItemIconPos = 5;</code>
       */
      public Builder clearItemIconPos() {
        
        itemIconPos_ = getDefaultInstance().getItemIconPos();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *道具Icon位置
       * </pre>
       *
       * <code>string ItemIconPos = 5;</code>
       */
      public Builder setItemIconPosBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        itemIconPos_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object itemDropPos_ = "";
      /**
       * <pre>
       *道具掉落位置
       * </pre>
       *
       * <code>string ItemDropPos = 6;</code>
       */
      public java.lang.String getItemDropPos() {
        java.lang.Object ref = itemDropPos_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          itemDropPos_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *道具掉落位置
       * </pre>
       *
       * <code>string ItemDropPos = 6;</code>
       */
      public com.google.protobuf.ByteString
          getItemDropPosBytes() {
        java.lang.Object ref = itemDropPos_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          itemDropPos_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *道具掉落位置
       * </pre>
       *
       * <code>string ItemDropPos = 6;</code>
       */
      public Builder setItemDropPos(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        itemDropPos_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *道具掉落位置
       * </pre>
       *
       * <code>string ItemDropPos = 6;</code>
       */
      public Builder clearItemDropPos() {
        
        itemDropPos_ = getDefaultInstance().getItemDropPos();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *道具掉落位置
       * </pre>
       *
       * <code>string ItemDropPos = 6;</code>
       */
      public Builder setItemDropPosBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        itemDropPos_ = value;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> taskID_ = java.util.Collections.emptyList();
      private void ensureTaskIDIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          taskID_ = new java.util.ArrayList<java.lang.Integer>(taskID_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <pre>
       *任务ID（；间隔）
       * </pre>
       *
       * <code>repeated int32 TaskID = 7;</code>
       */
      public java.util.List<java.lang.Integer>
          getTaskIDList() {
        return java.util.Collections.unmodifiableList(taskID_);
      }
      /**
       * <pre>
       *任务ID（；间隔）
       * </pre>
       *
       * <code>repeated int32 TaskID = 7;</code>
       */
      public int getTaskIDCount() {
        return taskID_.size();
      }
      /**
       * <pre>
       *任务ID（；间隔）
       * </pre>
       *
       * <code>repeated int32 TaskID = 7;</code>
       */
      public int getTaskID(int index) {
        return taskID_.get(index);
      }
      /**
       * <pre>
       *任务ID（；间隔）
       * </pre>
       *
       * <code>repeated int32 TaskID = 7;</code>
       */
      public Builder setTaskID(
          int index, int value) {
        ensureTaskIDIsMutable();
        taskID_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *任务ID（；间隔）
       * </pre>
       *
       * <code>repeated int32 TaskID = 7;</code>
       */
      public Builder addTaskID(int value) {
        ensureTaskIDIsMutable();
        taskID_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *任务ID（；间隔）
       * </pre>
       *
       * <code>repeated int32 TaskID = 7;</code>
       */
      public Builder addAllTaskID(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureTaskIDIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, taskID_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *任务ID（；间隔）
       * </pre>
       *
       * <code>repeated int32 TaskID = 7;</code>
       */
      public Builder clearTaskID() {
        taskID_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.Integer, java.lang.String> compose_;
      private com.google.protobuf.MapField<java.lang.Integer, java.lang.String>
      internalGetCompose() {
        if (compose_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              ComposeDefaultEntryHolder.defaultEntry);
        }
        return compose_;
      }
      private com.google.protobuf.MapField<java.lang.Integer, java.lang.String>
      internalGetMutableCompose() {
        onChanged();;
        if (compose_ == null) {
          compose_ = com.google.protobuf.MapField.newMapField(
              ComposeDefaultEntryHolder.defaultEntry);
        }
        if (!compose_.isMutable()) {
          compose_ = compose_.copy();
        }
        return compose_;
      }

      public int getComposeCount() {
        return internalGetCompose().getMap().size();
      }
      /**
       * <pre>
       *合成条件
       * </pre>
       *
       * <code>map&lt;int32, string&gt; Compose = 8;</code>
       */

      public boolean containsCompose(
          int key) {
        
        return internalGetCompose().getMap().containsKey(key);
      }
      /**
       * Use {@link #getComposeMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.String> getCompose() {
        return getComposeMap();
      }
      /**
       * <pre>
       *合成条件
       * </pre>
       *
       * <code>map&lt;int32, string&gt; Compose = 8;</code>
       */

      public java.util.Map<java.lang.Integer, java.lang.String> getComposeMap() {
        return internalGetCompose().getMap();
      }
      /**
       * <pre>
       *合成条件
       * </pre>
       *
       * <code>map&lt;int32, string&gt; Compose = 8;</code>
       */

      public java.lang.String getComposeOrDefault(
          int key,
          java.lang.String defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.String> map =
            internalGetCompose().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       *合成条件
       * </pre>
       *
       * <code>map&lt;int32, string&gt; Compose = 8;</code>
       */

      public java.lang.String getComposeOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.String> map =
            internalGetCompose().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearCompose() {
        internalGetMutableCompose().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       *合成条件
       * </pre>
       *
       * <code>map&lt;int32, string&gt; Compose = 8;</code>
       */

      public Builder removeCompose(
          int key) {
        
        internalGetMutableCompose().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.String>
      getMutableCompose() {
        return internalGetMutableCompose().getMutableMap();
      }
      /**
       * <pre>
       *合成条件
       * </pre>
       *
       * <code>map&lt;int32, string&gt; Compose = 8;</code>
       */
      public Builder putCompose(
          int key,
          java.lang.String value) {
        
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableCompose().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       *合成条件
       * </pre>
       *
       * <code>map&lt;int32, string&gt; Compose = 8;</code>
       */

      public Builder putAllCompose(
          java.util.Map<java.lang.Integer, java.lang.String> values) {
        internalGetMutableCompose().getMutableMap()
            .putAll(values);
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:com.elex.hoe.table.ItemConfig)
    }

    // @@protoc_insertion_point(class_scope:com.elex.hoe.table.ItemConfig)
    private static final com.elex.hoe.table.DemoTableOuterClass.ItemConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.elex.hoe.table.DemoTableOuterClass.ItemConfig();
    }

    public static com.elex.hoe.table.DemoTableOuterClass.ItemConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ItemConfig>
        PARSER = new com.google.protobuf.AbstractParser<ItemConfig>() {
      public ItemConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new ItemConfig(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ItemConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ItemConfig> getParserForType() {
      return PARSER;
    }

    public com.elex.hoe.table.DemoTableOuterClass.ItemConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface EquipConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.elex.hoe.table.EquipConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *道具id
     * </pre>
     *
     * <code>int32 Id = 1;</code>
     */
    int getId();

    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>string Name = 2;</code>
     */
    java.lang.String getName();
    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>string Name = 2;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     *稀有度-背景底色
     * </pre>
     *
     * <code>int32 Rare = 3;</code>
     */
    int getRare();

    /**
     * <pre>
     *对应的钻石价值
     * </pre>
     *
     * <code>int32 ItemValue = 4;</code>
     */
    int getItemValue();

    /**
     * <pre>
     *道具Icon位置
     * </pre>
     *
     * <code>string ItemIconPos = 5;</code>
     */
    java.lang.String getItemIconPos();
    /**
     * <pre>
     *道具Icon位置
     * </pre>
     *
     * <code>string ItemIconPos = 5;</code>
     */
    com.google.protobuf.ByteString
        getItemIconPosBytes();

    /**
     * <pre>
     *道具掉落位置
     * </pre>
     *
     * <code>string ItemDropPos = 6;</code>
     */
    java.lang.String getItemDropPos();
    /**
     * <pre>
     *道具掉落位置
     * </pre>
     *
     * <code>string ItemDropPos = 6;</code>
     */
    com.google.protobuf.ByteString
        getItemDropPosBytes();

    /**
     * <pre>
     *任务ID（；间隔）
     * </pre>
     *
     * <code>repeated int32 TaskID = 7;</code>
     */
    java.util.List<java.lang.Integer> getTaskIDList();
    /**
     * <pre>
     *任务ID（；间隔）
     * </pre>
     *
     * <code>repeated int32 TaskID = 7;</code>
     */
    int getTaskIDCount();
    /**
     * <pre>
     *任务ID（；间隔）
     * </pre>
     *
     * <code>repeated int32 TaskID = 7;</code>
     */
    int getTaskID(int index);

    /**
     * <pre>
     *合成条件
     * </pre>
     *
     * <code>map&lt;int32, string&gt; Compose = 8;</code>
     */
    int getComposeCount();
    /**
     * <pre>
     *合成条件
     * </pre>
     *
     * <code>map&lt;int32, string&gt; Compose = 8;</code>
     */
    boolean containsCompose(
        int key);
    /**
     * Use {@link #getComposeMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.String>
    getCompose();
    /**
     * <pre>
     *合成条件
     * </pre>
     *
     * <code>map&lt;int32, string&gt; Compose = 8;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.String>
    getComposeMap();
    /**
     * <pre>
     *合成条件
     * </pre>
     *
     * <code>map&lt;int32, string&gt; Compose = 8;</code>
     */

    java.lang.String getComposeOrDefault(
        int key,
        java.lang.String defaultValue);
    /**
     * <pre>
     *合成条件
     * </pre>
     *
     * <code>map&lt;int32, string&gt; Compose = 8;</code>
     */

    java.lang.String getComposeOrThrow(
        int key);
  }
  /**
   * Protobuf type {@code com.elex.hoe.table.EquipConfig}
   */
  public  static final class EquipConfig extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.elex.hoe.table.EquipConfig)
      EquipConfigOrBuilder {
    // Use EquipConfig.newBuilder() to construct.
    private EquipConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private EquipConfig() {
      id_ = 0;
      name_ = "";
      rare_ = 0;
      itemValue_ = 0;
      itemIconPos_ = "";
      itemDropPos_ = "";
      taskID_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private EquipConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              id_ = input.readInt32();
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 24: {

              rare_ = input.readInt32();
              break;
            }
            case 32: {

              itemValue_ = input.readInt32();
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();

              itemIconPos_ = s;
              break;
            }
            case 50: {
              java.lang.String s = input.readStringRequireUtf8();

              itemDropPos_ = s;
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                taskID_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              taskID_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                taskID_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                taskID_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                compose_ = com.google.protobuf.MapField.newMapField(
                    ComposeDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000080;
              }
              com.google.protobuf.MapEntry<java.lang.Integer, java.lang.String>
              compose__ = input.readMessage(
                  ComposeDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              compose_.getMutableMap().put(
                  compose__.getKey(), compose__.getValue());
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          taskID_ = java.util.Collections.unmodifiableList(taskID_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.elex.hoe.table.DemoTableOuterClass.internal_static_com_elex_hoe_table_EquipConfig_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 8:
          return internalGetCompose();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.elex.hoe.table.DemoTableOuterClass.internal_static_com_elex_hoe_table_EquipConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.elex.hoe.table.DemoTableOuterClass.EquipConfig.class, com.elex.hoe.table.DemoTableOuterClass.EquipConfig.Builder.class);
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <pre>
     *道具id
     * </pre>
     *
     * <code>int32 Id = 1;</code>
     */
    public int getId() {
      return id_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>string Name = 2;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>string Name = 2;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int RARE_FIELD_NUMBER = 3;
    private int rare_;
    /**
     * <pre>
     *稀有度-背景底色
     * </pre>
     *
     * <code>int32 Rare = 3;</code>
     */
    public int getRare() {
      return rare_;
    }

    public static final int ITEMVALUE_FIELD_NUMBER = 4;
    private int itemValue_;
    /**
     * <pre>
     *对应的钻石价值
     * </pre>
     *
     * <code>int32 ItemValue = 4;</code>
     */
    public int getItemValue() {
      return itemValue_;
    }

    public static final int ITEMICONPOS_FIELD_NUMBER = 5;
    private volatile java.lang.Object itemIconPos_;
    /**
     * <pre>
     *道具Icon位置
     * </pre>
     *
     * <code>string ItemIconPos = 5;</code>
     */
    public java.lang.String getItemIconPos() {
      java.lang.Object ref = itemIconPos_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        itemIconPos_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *道具Icon位置
     * </pre>
     *
     * <code>string ItemIconPos = 5;</code>
     */
    public com.google.protobuf.ByteString
        getItemIconPosBytes() {
      java.lang.Object ref = itemIconPos_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        itemIconPos_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ITEMDROPPOS_FIELD_NUMBER = 6;
    private volatile java.lang.Object itemDropPos_;
    /**
     * <pre>
     *道具掉落位置
     * </pre>
     *
     * <code>string ItemDropPos = 6;</code>
     */
    public java.lang.String getItemDropPos() {
      java.lang.Object ref = itemDropPos_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        itemDropPos_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *道具掉落位置
     * </pre>
     *
     * <code>string ItemDropPos = 6;</code>
     */
    public com.google.protobuf.ByteString
        getItemDropPosBytes() {
      java.lang.Object ref = itemDropPos_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        itemDropPos_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TASKID_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> taskID_;
    /**
     * <pre>
     *任务ID（；间隔）
     * </pre>
     *
     * <code>repeated int32 TaskID = 7;</code>
     */
    public java.util.List<java.lang.Integer>
        getTaskIDList() {
      return taskID_;
    }
    /**
     * <pre>
     *任务ID（；间隔）
     * </pre>
     *
     * <code>repeated int32 TaskID = 7;</code>
     */
    public int getTaskIDCount() {
      return taskID_.size();
    }
    /**
     * <pre>
     *任务ID（；间隔）
     * </pre>
     *
     * <code>repeated int32 TaskID = 7;</code>
     */
    public int getTaskID(int index) {
      return taskID_.get(index);
    }
    private int taskIDMemoizedSerializedSize = -1;

    public static final int COMPOSE_FIELD_NUMBER = 8;
    private static final class ComposeDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.Integer, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.Integer, java.lang.String>newDefaultInstance(
                  com.elex.hoe.table.DemoTableOuterClass.internal_static_com_elex_hoe_table_EquipConfig_ComposeEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.Integer, java.lang.String> compose_;
    private com.google.protobuf.MapField<java.lang.Integer, java.lang.String>
    internalGetCompose() {
      if (compose_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            ComposeDefaultEntryHolder.defaultEntry);
      }
      return compose_;
    }

    public int getComposeCount() {
      return internalGetCompose().getMap().size();
    }
    /**
     * <pre>
     *合成条件
     * </pre>
     *
     * <code>map&lt;int32, string&gt; Compose = 8;</code>
     */

    public boolean containsCompose(
        int key) {
      
      return internalGetCompose().getMap().containsKey(key);
    }
    /**
     * Use {@link #getComposeMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.String> getCompose() {
      return getComposeMap();
    }
    /**
     * <pre>
     *合成条件
     * </pre>
     *
     * <code>map&lt;int32, string&gt; Compose = 8;</code>
     */

    public java.util.Map<java.lang.Integer, java.lang.String> getComposeMap() {
      return internalGetCompose().getMap();
    }
    /**
     * <pre>
     *合成条件
     * </pre>
     *
     * <code>map&lt;int32, string&gt; Compose = 8;</code>
     */

    public java.lang.String getComposeOrDefault(
        int key,
        java.lang.String defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.String> map =
          internalGetCompose().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     *合成条件
     * </pre>
     *
     * <code>map&lt;int32, string&gt; Compose = 8;</code>
     */

    public java.lang.String getComposeOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.String> map =
          internalGetCompose().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (id_ != 0) {
        output.writeInt32(1, id_);
      }
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, name_);
      }
      if (rare_ != 0) {
        output.writeInt32(3, rare_);
      }
      if (itemValue_ != 0) {
        output.writeInt32(4, itemValue_);
      }
      if (!getItemIconPosBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, itemIconPos_);
      }
      if (!getItemDropPosBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, itemDropPos_);
      }
      if (getTaskIDList().size() > 0) {
        output.writeUInt32NoTag(58);
        output.writeUInt32NoTag(taskIDMemoizedSerializedSize);
      }
      for (int i = 0; i < taskID_.size(); i++) {
        output.writeInt32NoTag(taskID_.get(i));
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeIntegerMapTo(
          output,
          internalGetCompose(),
          ComposeDefaultEntryHolder.defaultEntry,
          8);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (id_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, id_);
      }
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, name_);
      }
      if (rare_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, rare_);
      }
      if (itemValue_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, itemValue_);
      }
      if (!getItemIconPosBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, itemIconPos_);
      }
      if (!getItemDropPosBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, itemDropPos_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < taskID_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(taskID_.get(i));
        }
        size += dataSize;
        if (!getTaskIDList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        taskIDMemoizedSerializedSize = dataSize;
      }
      for (java.util.Map.Entry<java.lang.Integer, java.lang.String> entry
           : internalGetCompose().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.Integer, java.lang.String>
        compose__ = ComposeDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(8, compose__);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.elex.hoe.table.DemoTableOuterClass.EquipConfig)) {
        return super.equals(obj);
      }
      com.elex.hoe.table.DemoTableOuterClass.EquipConfig other = (com.elex.hoe.table.DemoTableOuterClass.EquipConfig) obj;

      boolean result = true;
      result = result && (getId()
          == other.getId());
      result = result && getName()
          .equals(other.getName());
      result = result && (getRare()
          == other.getRare());
      result = result && (getItemValue()
          == other.getItemValue());
      result = result && getItemIconPos()
          .equals(other.getItemIconPos());
      result = result && getItemDropPos()
          .equals(other.getItemDropPos());
      result = result && getTaskIDList()
          .equals(other.getTaskIDList());
      result = result && internalGetCompose().equals(
          other.internalGetCompose());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + RARE_FIELD_NUMBER;
      hash = (53 * hash) + getRare();
      hash = (37 * hash) + ITEMVALUE_FIELD_NUMBER;
      hash = (53 * hash) + getItemValue();
      hash = (37 * hash) + ITEMICONPOS_FIELD_NUMBER;
      hash = (53 * hash) + getItemIconPos().hashCode();
      hash = (37 * hash) + ITEMDROPPOS_FIELD_NUMBER;
      hash = (53 * hash) + getItemDropPos().hashCode();
      if (getTaskIDCount() > 0) {
        hash = (37 * hash) + TASKID_FIELD_NUMBER;
        hash = (53 * hash) + getTaskIDList().hashCode();
      }
      if (!internalGetCompose().getMap().isEmpty()) {
        hash = (37 * hash) + COMPOSE_FIELD_NUMBER;
        hash = (53 * hash) + internalGetCompose().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.elex.hoe.table.DemoTableOuterClass.EquipConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elex.hoe.table.DemoTableOuterClass.EquipConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elex.hoe.table.DemoTableOuterClass.EquipConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elex.hoe.table.DemoTableOuterClass.EquipConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elex.hoe.table.DemoTableOuterClass.EquipConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.elex.hoe.table.DemoTableOuterClass.EquipConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.elex.hoe.table.DemoTableOuterClass.EquipConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.elex.hoe.table.DemoTableOuterClass.EquipConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.elex.hoe.table.DemoTableOuterClass.EquipConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.elex.hoe.table.DemoTableOuterClass.EquipConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.elex.hoe.table.DemoTableOuterClass.EquipConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.elex.hoe.table.EquipConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.elex.hoe.table.EquipConfig)
        com.elex.hoe.table.DemoTableOuterClass.EquipConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.elex.hoe.table.DemoTableOuterClass.internal_static_com_elex_hoe_table_EquipConfig_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 8:
            return internalGetCompose();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 8:
            return internalGetMutableCompose();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.elex.hoe.table.DemoTableOuterClass.internal_static_com_elex_hoe_table_EquipConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.elex.hoe.table.DemoTableOuterClass.EquipConfig.class, com.elex.hoe.table.DemoTableOuterClass.EquipConfig.Builder.class);
      }

      // Construct using com.elex.hoe.table.DemoTableOuterClass.EquipConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        id_ = 0;

        name_ = "";

        rare_ = 0;

        itemValue_ = 0;

        itemIconPos_ = "";

        itemDropPos_ = "";

        taskID_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        internalGetMutableCompose().clear();
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.elex.hoe.table.DemoTableOuterClass.internal_static_com_elex_hoe_table_EquipConfig_descriptor;
      }

      public com.elex.hoe.table.DemoTableOuterClass.EquipConfig getDefaultInstanceForType() {
        return com.elex.hoe.table.DemoTableOuterClass.EquipConfig.getDefaultInstance();
      }

      public com.elex.hoe.table.DemoTableOuterClass.EquipConfig build() {
        com.elex.hoe.table.DemoTableOuterClass.EquipConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.elex.hoe.table.DemoTableOuterClass.EquipConfig buildPartial() {
        com.elex.hoe.table.DemoTableOuterClass.EquipConfig result = new com.elex.hoe.table.DemoTableOuterClass.EquipConfig(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.id_ = id_;
        result.name_ = name_;
        result.rare_ = rare_;
        result.itemValue_ = itemValue_;
        result.itemIconPos_ = itemIconPos_;
        result.itemDropPos_ = itemDropPos_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          taskID_ = java.util.Collections.unmodifiableList(taskID_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.taskID_ = taskID_;
        result.compose_ = internalGetCompose();
        result.compose_.makeImmutable();
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.elex.hoe.table.DemoTableOuterClass.EquipConfig) {
          return mergeFrom((com.elex.hoe.table.DemoTableOuterClass.EquipConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.elex.hoe.table.DemoTableOuterClass.EquipConfig other) {
        if (other == com.elex.hoe.table.DemoTableOuterClass.EquipConfig.getDefaultInstance()) return this;
        if (other.getId() != 0) {
          setId(other.getId());
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (other.getRare() != 0) {
          setRare(other.getRare());
        }
        if (other.getItemValue() != 0) {
          setItemValue(other.getItemValue());
        }
        if (!other.getItemIconPos().isEmpty()) {
          itemIconPos_ = other.itemIconPos_;
          onChanged();
        }
        if (!other.getItemDropPos().isEmpty()) {
          itemDropPos_ = other.itemDropPos_;
          onChanged();
        }
        if (!other.taskID_.isEmpty()) {
          if (taskID_.isEmpty()) {
            taskID_ = other.taskID_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureTaskIDIsMutable();
            taskID_.addAll(other.taskID_);
          }
          onChanged();
        }
        internalGetMutableCompose().mergeFrom(
            other.internalGetCompose());
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.elex.hoe.table.DemoTableOuterClass.EquipConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.elex.hoe.table.DemoTableOuterClass.EquipConfig) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int id_ ;
      /**
       * <pre>
       *道具id
       * </pre>
       *
       * <code>int32 Id = 1;</code>
       */
      public int getId() {
        return id_;
      }
      /**
       * <pre>
       *道具id
       * </pre>
       *
       * <code>int32 Id = 1;</code>
       */
      public Builder setId(int value) {
        
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *道具id
       * </pre>
       *
       * <code>int32 Id = 1;</code>
       */
      public Builder clearId() {
        
        id_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>string Name = 2;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>string Name = 2;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>string Name = 2;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>string Name = 2;</code>
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>string Name = 2;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private int rare_ ;
      /**
       * <pre>
       *稀有度-背景底色
       * </pre>
       *
       * <code>int32 Rare = 3;</code>
       */
      public int getRare() {
        return rare_;
      }
      /**
       * <pre>
       *稀有度-背景底色
       * </pre>
       *
       * <code>int32 Rare = 3;</code>
       */
      public Builder setRare(int value) {
        
        rare_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *稀有度-背景底色
       * </pre>
       *
       * <code>int32 Rare = 3;</code>
       */
      public Builder clearRare() {
        
        rare_ = 0;
        onChanged();
        return this;
      }

      private int itemValue_ ;
      /**
       * <pre>
       *对应的钻石价值
       * </pre>
       *
       * <code>int32 ItemValue = 4;</code>
       */
      public int getItemValue() {
        return itemValue_;
      }
      /**
       * <pre>
       *对应的钻石价值
       * </pre>
       *
       * <code>int32 ItemValue = 4;</code>
       */
      public Builder setItemValue(int value) {
        
        itemValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *对应的钻石价值
       * </pre>
       *
       * <code>int32 ItemValue = 4;</code>
       */
      public Builder clearItemValue() {
        
        itemValue_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object itemIconPos_ = "";
      /**
       * <pre>
       *道具Icon位置
       * </pre>
       *
       * <code>string ItemIconPos = 5;</code>
       */
      public java.lang.String getItemIconPos() {
        java.lang.Object ref = itemIconPos_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          itemIconPos_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *道具Icon位置
       * </pre>
       *
       * <code>string ItemIconPos = 5;</code>
       */
      public com.google.protobuf.ByteString
          getItemIconPosBytes() {
        java.lang.Object ref = itemIconPos_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          itemIconPos_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *道具Icon位置
       * </pre>
       *
       * <code>string ItemIconPos = 5;</code>
       */
      public Builder setItemIconPos(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        itemIconPos_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *道具Icon位置
       * </pre>
       *
       * <code>string ItemIconPos = 5;</code>
       */
      public Builder clearItemIconPos() {
        
        itemIconPos_ = getDefaultInstance().getItemIconPos();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *道具Icon位置
       * </pre>
       *
       * <code>string ItemIconPos = 5;</code>
       */
      public Builder setItemIconPosBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        itemIconPos_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object itemDropPos_ = "";
      /**
       * <pre>
       *道具掉落位置
       * </pre>
       *
       * <code>string ItemDropPos = 6;</code>
       */
      public java.lang.String getItemDropPos() {
        java.lang.Object ref = itemDropPos_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          itemDropPos_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *道具掉落位置
       * </pre>
       *
       * <code>string ItemDropPos = 6;</code>
       */
      public com.google.protobuf.ByteString
          getItemDropPosBytes() {
        java.lang.Object ref = itemDropPos_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          itemDropPos_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *道具掉落位置
       * </pre>
       *
       * <code>string ItemDropPos = 6;</code>
       */
      public Builder setItemDropPos(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        itemDropPos_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *道具掉落位置
       * </pre>
       *
       * <code>string ItemDropPos = 6;</code>
       */
      public Builder clearItemDropPos() {
        
        itemDropPos_ = getDefaultInstance().getItemDropPos();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *道具掉落位置
       * </pre>
       *
       * <code>string ItemDropPos = 6;</code>
       */
      public Builder setItemDropPosBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        itemDropPos_ = value;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> taskID_ = java.util.Collections.emptyList();
      private void ensureTaskIDIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          taskID_ = new java.util.ArrayList<java.lang.Integer>(taskID_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <pre>
       *任务ID（；间隔）
       * </pre>
       *
       * <code>repeated int32 TaskID = 7;</code>
       */
      public java.util.List<java.lang.Integer>
          getTaskIDList() {
        return java.util.Collections.unmodifiableList(taskID_);
      }
      /**
       * <pre>
       *任务ID（；间隔）
       * </pre>
       *
       * <code>repeated int32 TaskID = 7;</code>
       */
      public int getTaskIDCount() {
        return taskID_.size();
      }
      /**
       * <pre>
       *任务ID（；间隔）
       * </pre>
       *
       * <code>repeated int32 TaskID = 7;</code>
       */
      public int getTaskID(int index) {
        return taskID_.get(index);
      }
      /**
       * <pre>
       *任务ID（；间隔）
       * </pre>
       *
       * <code>repeated int32 TaskID = 7;</code>
       */
      public Builder setTaskID(
          int index, int value) {
        ensureTaskIDIsMutable();
        taskID_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *任务ID（；间隔）
       * </pre>
       *
       * <code>repeated int32 TaskID = 7;</code>
       */
      public Builder addTaskID(int value) {
        ensureTaskIDIsMutable();
        taskID_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *任务ID（；间隔）
       * </pre>
       *
       * <code>repeated int32 TaskID = 7;</code>
       */
      public Builder addAllTaskID(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureTaskIDIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, taskID_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *任务ID（；间隔）
       * </pre>
       *
       * <code>repeated int32 TaskID = 7;</code>
       */
      public Builder clearTaskID() {
        taskID_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.Integer, java.lang.String> compose_;
      private com.google.protobuf.MapField<java.lang.Integer, java.lang.String>
      internalGetCompose() {
        if (compose_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              ComposeDefaultEntryHolder.defaultEntry);
        }
        return compose_;
      }
      private com.google.protobuf.MapField<java.lang.Integer, java.lang.String>
      internalGetMutableCompose() {
        onChanged();;
        if (compose_ == null) {
          compose_ = com.google.protobuf.MapField.newMapField(
              ComposeDefaultEntryHolder.defaultEntry);
        }
        if (!compose_.isMutable()) {
          compose_ = compose_.copy();
        }
        return compose_;
      }

      public int getComposeCount() {
        return internalGetCompose().getMap().size();
      }
      /**
       * <pre>
       *合成条件
       * </pre>
       *
       * <code>map&lt;int32, string&gt; Compose = 8;</code>
       */

      public boolean containsCompose(
          int key) {
        
        return internalGetCompose().getMap().containsKey(key);
      }
      /**
       * Use {@link #getComposeMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.String> getCompose() {
        return getComposeMap();
      }
      /**
       * <pre>
       *合成条件
       * </pre>
       *
       * <code>map&lt;int32, string&gt; Compose = 8;</code>
       */

      public java.util.Map<java.lang.Integer, java.lang.String> getComposeMap() {
        return internalGetCompose().getMap();
      }
      /**
       * <pre>
       *合成条件
       * </pre>
       *
       * <code>map&lt;int32, string&gt; Compose = 8;</code>
       */

      public java.lang.String getComposeOrDefault(
          int key,
          java.lang.String defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.String> map =
            internalGetCompose().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       *合成条件
       * </pre>
       *
       * <code>map&lt;int32, string&gt; Compose = 8;</code>
       */

      public java.lang.String getComposeOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.String> map =
            internalGetCompose().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearCompose() {
        internalGetMutableCompose().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       *合成条件
       * </pre>
       *
       * <code>map&lt;int32, string&gt; Compose = 8;</code>
       */

      public Builder removeCompose(
          int key) {
        
        internalGetMutableCompose().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.String>
      getMutableCompose() {
        return internalGetMutableCompose().getMutableMap();
      }
      /**
       * <pre>
       *合成条件
       * </pre>
       *
       * <code>map&lt;int32, string&gt; Compose = 8;</code>
       */
      public Builder putCompose(
          int key,
          java.lang.String value) {
        
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableCompose().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       *合成条件
       * </pre>
       *
       * <code>map&lt;int32, string&gt; Compose = 8;</code>
       */

      public Builder putAllCompose(
          java.util.Map<java.lang.Integer, java.lang.String> values) {
        internalGetMutableCompose().getMutableMap()
            .putAll(values);
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:com.elex.hoe.table.EquipConfig)
    }

    // @@protoc_insertion_point(class_scope:com.elex.hoe.table.EquipConfig)
    private static final com.elex.hoe.table.DemoTableOuterClass.EquipConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.elex.hoe.table.DemoTableOuterClass.EquipConfig();
    }

    public static com.elex.hoe.table.DemoTableOuterClass.EquipConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<EquipConfig>
        PARSER = new com.google.protobuf.AbstractParser<EquipConfig>() {
      public EquipConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new EquipConfig(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<EquipConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<EquipConfig> getParserForType() {
      return PARSER;
    }

    public com.elex.hoe.table.DemoTableOuterClass.EquipConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DemoTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.elex.hoe.table.DemoTable)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>map&lt;int32, .com.elex.hoe.table.ItemConfig&gt; ItemConfigTable = 1;</code>
     */
    int getItemConfigTableCount();
    /**
     * <code>map&lt;int32, .com.elex.hoe.table.ItemConfig&gt; ItemConfigTable = 1;</code>
     */
    boolean containsItemConfigTable(
        int key);
    /**
     * Use {@link #getItemConfigTableMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.ItemConfig>
    getItemConfigTable();
    /**
     * <code>map&lt;int32, .com.elex.hoe.table.ItemConfig&gt; ItemConfigTable = 1;</code>
     */
    java.util.Map<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.ItemConfig>
    getItemConfigTableMap();
    /**
     * <code>map&lt;int32, .com.elex.hoe.table.ItemConfig&gt; ItemConfigTable = 1;</code>
     */

    com.elex.hoe.table.DemoTableOuterClass.ItemConfig getItemConfigTableOrDefault(
        int key,
        com.elex.hoe.table.DemoTableOuterClass.ItemConfig defaultValue);
    /**
     * <code>map&lt;int32, .com.elex.hoe.table.ItemConfig&gt; ItemConfigTable = 1;</code>
     */

    com.elex.hoe.table.DemoTableOuterClass.ItemConfig getItemConfigTableOrThrow(
        int key);

    /**
     * <code>map&lt;int32, .com.elex.hoe.table.EquipConfig&gt; EquipConfigTable = 2;</code>
     */
    int getEquipConfigTableCount();
    /**
     * <code>map&lt;int32, .com.elex.hoe.table.EquipConfig&gt; EquipConfigTable = 2;</code>
     */
    boolean containsEquipConfigTable(
        int key);
    /**
     * Use {@link #getEquipConfigTableMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.EquipConfig>
    getEquipConfigTable();
    /**
     * <code>map&lt;int32, .com.elex.hoe.table.EquipConfig&gt; EquipConfigTable = 2;</code>
     */
    java.util.Map<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.EquipConfig>
    getEquipConfigTableMap();
    /**
     * <code>map&lt;int32, .com.elex.hoe.table.EquipConfig&gt; EquipConfigTable = 2;</code>
     */

    com.elex.hoe.table.DemoTableOuterClass.EquipConfig getEquipConfigTableOrDefault(
        int key,
        com.elex.hoe.table.DemoTableOuterClass.EquipConfig defaultValue);
    /**
     * <code>map&lt;int32, .com.elex.hoe.table.EquipConfig&gt; EquipConfigTable = 2;</code>
     */

    com.elex.hoe.table.DemoTableOuterClass.EquipConfig getEquipConfigTableOrThrow(
        int key);
  }
  /**
   * Protobuf type {@code com.elex.hoe.table.DemoTable}
   */
  public  static final class DemoTable extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.elex.hoe.table.DemoTable)
      DemoTableOrBuilder {
    // Use DemoTable.newBuilder() to construct.
    private DemoTable(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DemoTable() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private DemoTable(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                itemConfigTable_ = com.google.protobuf.MapField.newMapField(
                    ItemConfigTableDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.ItemConfig>
              itemConfigTable__ = input.readMessage(
                  ItemConfigTableDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              itemConfigTable_.getMutableMap().put(
                  itemConfigTable__.getKey(), itemConfigTable__.getValue());
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                equipConfigTable_ = com.google.protobuf.MapField.newMapField(
                    EquipConfigTableDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000002;
              }
              com.google.protobuf.MapEntry<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.EquipConfig>
              equipConfigTable__ = input.readMessage(
                  EquipConfigTableDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              equipConfigTable_.getMutableMap().put(
                  equipConfigTable__.getKey(), equipConfigTable__.getValue());
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.elex.hoe.table.DemoTableOuterClass.internal_static_com_elex_hoe_table_DemoTable_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetItemConfigTable();
        case 2:
          return internalGetEquipConfigTable();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.elex.hoe.table.DemoTableOuterClass.internal_static_com_elex_hoe_table_DemoTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.elex.hoe.table.DemoTableOuterClass.DemoTable.class, com.elex.hoe.table.DemoTableOuterClass.DemoTable.Builder.class);
    }

    public static final int ITEMCONFIGTABLE_FIELD_NUMBER = 1;
    private static final class ItemConfigTableDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.ItemConfig> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.ItemConfig>newDefaultInstance(
                  com.elex.hoe.table.DemoTableOuterClass.internal_static_com_elex_hoe_table_DemoTable_ItemConfigTableEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  com.elex.hoe.table.DemoTableOuterClass.ItemConfig.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.ItemConfig> itemConfigTable_;
    private com.google.protobuf.MapField<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.ItemConfig>
    internalGetItemConfigTable() {
      if (itemConfigTable_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            ItemConfigTableDefaultEntryHolder.defaultEntry);
      }
      return itemConfigTable_;
    }

    public int getItemConfigTableCount() {
      return internalGetItemConfigTable().getMap().size();
    }
    /**
     * <code>map&lt;int32, .com.elex.hoe.table.ItemConfig&gt; ItemConfigTable = 1;</code>
     */

    public boolean containsItemConfigTable(
        int key) {
      
      return internalGetItemConfigTable().getMap().containsKey(key);
    }
    /**
     * Use {@link #getItemConfigTableMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.ItemConfig> getItemConfigTable() {
      return getItemConfigTableMap();
    }
    /**
     * <code>map&lt;int32, .com.elex.hoe.table.ItemConfig&gt; ItemConfigTable = 1;</code>
     */

    public java.util.Map<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.ItemConfig> getItemConfigTableMap() {
      return internalGetItemConfigTable().getMap();
    }
    /**
     * <code>map&lt;int32, .com.elex.hoe.table.ItemConfig&gt; ItemConfigTable = 1;</code>
     */

    public com.elex.hoe.table.DemoTableOuterClass.ItemConfig getItemConfigTableOrDefault(
        int key,
        com.elex.hoe.table.DemoTableOuterClass.ItemConfig defaultValue) {
      
      java.util.Map<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.ItemConfig> map =
          internalGetItemConfigTable().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, .com.elex.hoe.table.ItemConfig&gt; ItemConfigTable = 1;</code>
     */

    public com.elex.hoe.table.DemoTableOuterClass.ItemConfig getItemConfigTableOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.ItemConfig> map =
          internalGetItemConfigTable().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int EQUIPCONFIGTABLE_FIELD_NUMBER = 2;
    private static final class EquipConfigTableDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.EquipConfig> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.EquipConfig>newDefaultInstance(
                  com.elex.hoe.table.DemoTableOuterClass.internal_static_com_elex_hoe_table_DemoTable_EquipConfigTableEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  com.elex.hoe.table.DemoTableOuterClass.EquipConfig.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.EquipConfig> equipConfigTable_;
    private com.google.protobuf.MapField<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.EquipConfig>
    internalGetEquipConfigTable() {
      if (equipConfigTable_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            EquipConfigTableDefaultEntryHolder.defaultEntry);
      }
      return equipConfigTable_;
    }

    public int getEquipConfigTableCount() {
      return internalGetEquipConfigTable().getMap().size();
    }
    /**
     * <code>map&lt;int32, .com.elex.hoe.table.EquipConfig&gt; EquipConfigTable = 2;</code>
     */

    public boolean containsEquipConfigTable(
        int key) {
      
      return internalGetEquipConfigTable().getMap().containsKey(key);
    }
    /**
     * Use {@link #getEquipConfigTableMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.EquipConfig> getEquipConfigTable() {
      return getEquipConfigTableMap();
    }
    /**
     * <code>map&lt;int32, .com.elex.hoe.table.EquipConfig&gt; EquipConfigTable = 2;</code>
     */

    public java.util.Map<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.EquipConfig> getEquipConfigTableMap() {
      return internalGetEquipConfigTable().getMap();
    }
    /**
     * <code>map&lt;int32, .com.elex.hoe.table.EquipConfig&gt; EquipConfigTable = 2;</code>
     */

    public com.elex.hoe.table.DemoTableOuterClass.EquipConfig getEquipConfigTableOrDefault(
        int key,
        com.elex.hoe.table.DemoTableOuterClass.EquipConfig defaultValue) {
      
      java.util.Map<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.EquipConfig> map =
          internalGetEquipConfigTable().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, .com.elex.hoe.table.EquipConfig&gt; EquipConfigTable = 2;</code>
     */

    public com.elex.hoe.table.DemoTableOuterClass.EquipConfig getEquipConfigTableOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.EquipConfig> map =
          internalGetEquipConfigTable().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageV3
        .serializeIntegerMapTo(
          output,
          internalGetItemConfigTable(),
          ItemConfigTableDefaultEntryHolder.defaultEntry,
          1);
      com.google.protobuf.GeneratedMessageV3
        .serializeIntegerMapTo(
          output,
          internalGetEquipConfigTable(),
          EquipConfigTableDefaultEntryHolder.defaultEntry,
          2);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (java.util.Map.Entry<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.ItemConfig> entry
           : internalGetItemConfigTable().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.ItemConfig>
        itemConfigTable__ = ItemConfigTableDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, itemConfigTable__);
      }
      for (java.util.Map.Entry<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.EquipConfig> entry
           : internalGetEquipConfigTable().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.EquipConfig>
        equipConfigTable__ = EquipConfigTableDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, equipConfigTable__);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.elex.hoe.table.DemoTableOuterClass.DemoTable)) {
        return super.equals(obj);
      }
      com.elex.hoe.table.DemoTableOuterClass.DemoTable other = (com.elex.hoe.table.DemoTableOuterClass.DemoTable) obj;

      boolean result = true;
      result = result && internalGetItemConfigTable().equals(
          other.internalGetItemConfigTable());
      result = result && internalGetEquipConfigTable().equals(
          other.internalGetEquipConfigTable());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (!internalGetItemConfigTable().getMap().isEmpty()) {
        hash = (37 * hash) + ITEMCONFIGTABLE_FIELD_NUMBER;
        hash = (53 * hash) + internalGetItemConfigTable().hashCode();
      }
      if (!internalGetEquipConfigTable().getMap().isEmpty()) {
        hash = (37 * hash) + EQUIPCONFIGTABLE_FIELD_NUMBER;
        hash = (53 * hash) + internalGetEquipConfigTable().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.elex.hoe.table.DemoTableOuterClass.DemoTable parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elex.hoe.table.DemoTableOuterClass.DemoTable parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elex.hoe.table.DemoTableOuterClass.DemoTable parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elex.hoe.table.DemoTableOuterClass.DemoTable parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elex.hoe.table.DemoTableOuterClass.DemoTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.elex.hoe.table.DemoTableOuterClass.DemoTable parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.elex.hoe.table.DemoTableOuterClass.DemoTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.elex.hoe.table.DemoTableOuterClass.DemoTable parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.elex.hoe.table.DemoTableOuterClass.DemoTable parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.elex.hoe.table.DemoTableOuterClass.DemoTable parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.elex.hoe.table.DemoTableOuterClass.DemoTable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.elex.hoe.table.DemoTable}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.elex.hoe.table.DemoTable)
        com.elex.hoe.table.DemoTableOuterClass.DemoTableOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.elex.hoe.table.DemoTableOuterClass.internal_static_com_elex_hoe_table_DemoTable_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetItemConfigTable();
          case 2:
            return internalGetEquipConfigTable();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetMutableItemConfigTable();
          case 2:
            return internalGetMutableEquipConfigTable();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.elex.hoe.table.DemoTableOuterClass.internal_static_com_elex_hoe_table_DemoTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.elex.hoe.table.DemoTableOuterClass.DemoTable.class, com.elex.hoe.table.DemoTableOuterClass.DemoTable.Builder.class);
      }

      // Construct using com.elex.hoe.table.DemoTableOuterClass.DemoTable.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        internalGetMutableItemConfigTable().clear();
        internalGetMutableEquipConfigTable().clear();
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.elex.hoe.table.DemoTableOuterClass.internal_static_com_elex_hoe_table_DemoTable_descriptor;
      }

      public com.elex.hoe.table.DemoTableOuterClass.DemoTable getDefaultInstanceForType() {
        return com.elex.hoe.table.DemoTableOuterClass.DemoTable.getDefaultInstance();
      }

      public com.elex.hoe.table.DemoTableOuterClass.DemoTable build() {
        com.elex.hoe.table.DemoTableOuterClass.DemoTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.elex.hoe.table.DemoTableOuterClass.DemoTable buildPartial() {
        com.elex.hoe.table.DemoTableOuterClass.DemoTable result = new com.elex.hoe.table.DemoTableOuterClass.DemoTable(this);
        int from_bitField0_ = bitField0_;
        result.itemConfigTable_ = internalGetItemConfigTable();
        result.itemConfigTable_.makeImmutable();
        result.equipConfigTable_ = internalGetEquipConfigTable();
        result.equipConfigTable_.makeImmutable();
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.elex.hoe.table.DemoTableOuterClass.DemoTable) {
          return mergeFrom((com.elex.hoe.table.DemoTableOuterClass.DemoTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.elex.hoe.table.DemoTableOuterClass.DemoTable other) {
        if (other == com.elex.hoe.table.DemoTableOuterClass.DemoTable.getDefaultInstance()) return this;
        internalGetMutableItemConfigTable().mergeFrom(
            other.internalGetItemConfigTable());
        internalGetMutableEquipConfigTable().mergeFrom(
            other.internalGetEquipConfigTable());
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.elex.hoe.table.DemoTableOuterClass.DemoTable parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.elex.hoe.table.DemoTableOuterClass.DemoTable) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.MapField<
          java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.ItemConfig> itemConfigTable_;
      private com.google.protobuf.MapField<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.ItemConfig>
      internalGetItemConfigTable() {
        if (itemConfigTable_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              ItemConfigTableDefaultEntryHolder.defaultEntry);
        }
        return itemConfigTable_;
      }
      private com.google.protobuf.MapField<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.ItemConfig>
      internalGetMutableItemConfigTable() {
        onChanged();;
        if (itemConfigTable_ == null) {
          itemConfigTable_ = com.google.protobuf.MapField.newMapField(
              ItemConfigTableDefaultEntryHolder.defaultEntry);
        }
        if (!itemConfigTable_.isMutable()) {
          itemConfigTable_ = itemConfigTable_.copy();
        }
        return itemConfigTable_;
      }

      public int getItemConfigTableCount() {
        return internalGetItemConfigTable().getMap().size();
      }
      /**
       * <code>map&lt;int32, .com.elex.hoe.table.ItemConfig&gt; ItemConfigTable = 1;</code>
       */

      public boolean containsItemConfigTable(
          int key) {
        
        return internalGetItemConfigTable().getMap().containsKey(key);
      }
      /**
       * Use {@link #getItemConfigTableMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.ItemConfig> getItemConfigTable() {
        return getItemConfigTableMap();
      }
      /**
       * <code>map&lt;int32, .com.elex.hoe.table.ItemConfig&gt; ItemConfigTable = 1;</code>
       */

      public java.util.Map<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.ItemConfig> getItemConfigTableMap() {
        return internalGetItemConfigTable().getMap();
      }
      /**
       * <code>map&lt;int32, .com.elex.hoe.table.ItemConfig&gt; ItemConfigTable = 1;</code>
       */

      public com.elex.hoe.table.DemoTableOuterClass.ItemConfig getItemConfigTableOrDefault(
          int key,
          com.elex.hoe.table.DemoTableOuterClass.ItemConfig defaultValue) {
        
        java.util.Map<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.ItemConfig> map =
            internalGetItemConfigTable().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, .com.elex.hoe.table.ItemConfig&gt; ItemConfigTable = 1;</code>
       */

      public com.elex.hoe.table.DemoTableOuterClass.ItemConfig getItemConfigTableOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.ItemConfig> map =
            internalGetItemConfigTable().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearItemConfigTable() {
        internalGetMutableItemConfigTable().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;int32, .com.elex.hoe.table.ItemConfig&gt; ItemConfigTable = 1;</code>
       */

      public Builder removeItemConfigTable(
          int key) {
        
        internalGetMutableItemConfigTable().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.ItemConfig>
      getMutableItemConfigTable() {
        return internalGetMutableItemConfigTable().getMutableMap();
      }
      /**
       * <code>map&lt;int32, .com.elex.hoe.table.ItemConfig&gt; ItemConfigTable = 1;</code>
       */
      public Builder putItemConfigTable(
          int key,
          com.elex.hoe.table.DemoTableOuterClass.ItemConfig value) {
        
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableItemConfigTable().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, .com.elex.hoe.table.ItemConfig&gt; ItemConfigTable = 1;</code>
       */

      public Builder putAllItemConfigTable(
          java.util.Map<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.ItemConfig> values) {
        internalGetMutableItemConfigTable().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.EquipConfig> equipConfigTable_;
      private com.google.protobuf.MapField<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.EquipConfig>
      internalGetEquipConfigTable() {
        if (equipConfigTable_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              EquipConfigTableDefaultEntryHolder.defaultEntry);
        }
        return equipConfigTable_;
      }
      private com.google.protobuf.MapField<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.EquipConfig>
      internalGetMutableEquipConfigTable() {
        onChanged();;
        if (equipConfigTable_ == null) {
          equipConfigTable_ = com.google.protobuf.MapField.newMapField(
              EquipConfigTableDefaultEntryHolder.defaultEntry);
        }
        if (!equipConfigTable_.isMutable()) {
          equipConfigTable_ = equipConfigTable_.copy();
        }
        return equipConfigTable_;
      }

      public int getEquipConfigTableCount() {
        return internalGetEquipConfigTable().getMap().size();
      }
      /**
       * <code>map&lt;int32, .com.elex.hoe.table.EquipConfig&gt; EquipConfigTable = 2;</code>
       */

      public boolean containsEquipConfigTable(
          int key) {
        
        return internalGetEquipConfigTable().getMap().containsKey(key);
      }
      /**
       * Use {@link #getEquipConfigTableMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.EquipConfig> getEquipConfigTable() {
        return getEquipConfigTableMap();
      }
      /**
       * <code>map&lt;int32, .com.elex.hoe.table.EquipConfig&gt; EquipConfigTable = 2;</code>
       */

      public java.util.Map<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.EquipConfig> getEquipConfigTableMap() {
        return internalGetEquipConfigTable().getMap();
      }
      /**
       * <code>map&lt;int32, .com.elex.hoe.table.EquipConfig&gt; EquipConfigTable = 2;</code>
       */

      public com.elex.hoe.table.DemoTableOuterClass.EquipConfig getEquipConfigTableOrDefault(
          int key,
          com.elex.hoe.table.DemoTableOuterClass.EquipConfig defaultValue) {
        
        java.util.Map<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.EquipConfig> map =
            internalGetEquipConfigTable().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, .com.elex.hoe.table.EquipConfig&gt; EquipConfigTable = 2;</code>
       */

      public com.elex.hoe.table.DemoTableOuterClass.EquipConfig getEquipConfigTableOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.EquipConfig> map =
            internalGetEquipConfigTable().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearEquipConfigTable() {
        internalGetMutableEquipConfigTable().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;int32, .com.elex.hoe.table.EquipConfig&gt; EquipConfigTable = 2;</code>
       */

      public Builder removeEquipConfigTable(
          int key) {
        
        internalGetMutableEquipConfigTable().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.EquipConfig>
      getMutableEquipConfigTable() {
        return internalGetMutableEquipConfigTable().getMutableMap();
      }
      /**
       * <code>map&lt;int32, .com.elex.hoe.table.EquipConfig&gt; EquipConfigTable = 2;</code>
       */
      public Builder putEquipConfigTable(
          int key,
          com.elex.hoe.table.DemoTableOuterClass.EquipConfig value) {
        
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableEquipConfigTable().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, .com.elex.hoe.table.EquipConfig&gt; EquipConfigTable = 2;</code>
       */

      public Builder putAllEquipConfigTable(
          java.util.Map<java.lang.Integer, com.elex.hoe.table.DemoTableOuterClass.EquipConfig> values) {
        internalGetMutableEquipConfigTable().getMutableMap()
            .putAll(values);
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:com.elex.hoe.table.DemoTable)
    }

    // @@protoc_insertion_point(class_scope:com.elex.hoe.table.DemoTable)
    private static final com.elex.hoe.table.DemoTableOuterClass.DemoTable DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.elex.hoe.table.DemoTableOuterClass.DemoTable();
    }

    public static com.elex.hoe.table.DemoTableOuterClass.DemoTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DemoTable>
        PARSER = new com.google.protobuf.AbstractParser<DemoTable>() {
      public DemoTable parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new DemoTable(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DemoTable> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DemoTable> getParserForType() {
      return PARSER;
    }

    public com.elex.hoe.table.DemoTableOuterClass.DemoTable getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_elex_hoe_table_ItemConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_elex_hoe_table_ItemConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_elex_hoe_table_ItemConfig_ComposeEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_elex_hoe_table_ItemConfig_ComposeEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_elex_hoe_table_EquipConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_elex_hoe_table_EquipConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_elex_hoe_table_EquipConfig_ComposeEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_elex_hoe_table_EquipConfig_ComposeEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_elex_hoe_table_DemoTable_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_elex_hoe_table_DemoTable_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_elex_hoe_table_DemoTable_ItemConfigTableEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_elex_hoe_table_DemoTable_ItemConfigTableEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_elex_hoe_table_DemoTable_EquipConfigTableEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_elex_hoe_table_DemoTable_EquipConfigTableEntry_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\017DemoTable.proto\022\022com.elex.hoe.table\"\357\001" +
      "\n\nItemConfig\022\n\n\002Id\030\001 \001(\005\022\014\n\004Name\030\002 \001(\t\022\014" +
      "\n\004Rare\030\003 \001(\005\022\021\n\tItemValue\030\004 \001(\005\022\023\n\013ItemI" +
      "conPos\030\005 \001(\t\022\023\n\013ItemDropPos\030\006 \001(\t\022\016\n\006Tas" +
      "kID\030\007 \003(\005\022<\n\007Compose\030\010 \003(\0132+.com.elex.ho" +
      "e.table.ItemConfig.ComposeEntry\032.\n\014Compo" +
      "seEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\t:\0028\001\"" +
      "\361\001\n\013EquipConfig\022\n\n\002Id\030\001 \001(\005\022\014\n\004Name\030\002 \001(" +
      "\t\022\014\n\004Rare\030\003 \001(\005\022\021\n\tItemValue\030\004 \001(\005\022\023\n\013It" +
      "emIconPos\030\005 \001(\t\022\023\n\013ItemDropPos\030\006 \001(\t\022\016\n\006",
      "TaskID\030\007 \003(\005\022=\n\007Compose\030\010 \003(\0132,.com.elex" +
      ".hoe.table.EquipConfig.ComposeEntry\032.\n\014C" +
      "omposeEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\t:" +
      "\0028\001\"\331\002\n\tDemoTable\022K\n\017ItemConfigTable\030\001 \003" +
      "(\01322.com.elex.hoe.table.DemoTable.ItemCo" +
      "nfigTableEntry\022M\n\020EquipConfigTable\030\002 \003(\013" +
      "23.com.elex.hoe.table.DemoTable.EquipCon" +
      "figTableEntry\032V\n\024ItemConfigTableEntry\022\013\n" +
      "\003key\030\001 \001(\005\022-\n\005value\030\002 \001(\0132\036.com.elex.hoe" +
      ".table.ItemConfig:\0028\001\032X\n\025EquipConfigTabl",
      "eEntry\022\013\n\003key\030\001 \001(\005\022.\n\005value\030\002 \001(\0132\037.com" +
      ".elex.hoe.table.EquipConfig:\0028\001b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_com_elex_hoe_table_ItemConfig_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_elex_hoe_table_ItemConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_elex_hoe_table_ItemConfig_descriptor,
        new java.lang.String[] { "Id", "Name", "Rare", "ItemValue", "ItemIconPos", "ItemDropPos", "TaskID", "Compose", });
    internal_static_com_elex_hoe_table_ItemConfig_ComposeEntry_descriptor =
      internal_static_com_elex_hoe_table_ItemConfig_descriptor.getNestedTypes().get(0);
    internal_static_com_elex_hoe_table_ItemConfig_ComposeEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_elex_hoe_table_ItemConfig_ComposeEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_com_elex_hoe_table_EquipConfig_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_com_elex_hoe_table_EquipConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_elex_hoe_table_EquipConfig_descriptor,
        new java.lang.String[] { "Id", "Name", "Rare", "ItemValue", "ItemIconPos", "ItemDropPos", "TaskID", "Compose", });
    internal_static_com_elex_hoe_table_EquipConfig_ComposeEntry_descriptor =
      internal_static_com_elex_hoe_table_EquipConfig_descriptor.getNestedTypes().get(0);
    internal_static_com_elex_hoe_table_EquipConfig_ComposeEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_elex_hoe_table_EquipConfig_ComposeEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_com_elex_hoe_table_DemoTable_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_com_elex_hoe_table_DemoTable_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_elex_hoe_table_DemoTable_descriptor,
        new java.lang.String[] { "ItemConfigTable", "EquipConfigTable", });
    internal_static_com_elex_hoe_table_DemoTable_ItemConfigTableEntry_descriptor =
      internal_static_com_elex_hoe_table_DemoTable_descriptor.getNestedTypes().get(0);
    internal_static_com_elex_hoe_table_DemoTable_ItemConfigTableEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_elex_hoe_table_DemoTable_ItemConfigTableEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_com_elex_hoe_table_DemoTable_EquipConfigTableEntry_descriptor =
      internal_static_com_elex_hoe_table_DemoTable_descriptor.getNestedTypes().get(1);
    internal_static_com_elex_hoe_table_DemoTable_EquipConfigTableEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_elex_hoe_table_DemoTable_EquipConfigTableEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
